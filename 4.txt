import gradio as gr
import pandas as pd
import os

# Folder paths for CSV files and images
csv_folder_path = "/content/Id card dataset/"  # Update this to your actual folder path
image_folder_path = "/content/images"  # Update this to your actual image folder path

# Function to display the content of the selected CSV files and corresponding image
def display_csv_and_image(file_name):
    # Automatically append .csv extension to the file name
    csv_file_name = file_name + ".csv"

    # File paths for CSVs and images
    id_csv_file_path = os.path.join(csv_folder_path, csv_file_name)
    image_file_jpg = os.path.join(image_folder_path, file_name + ".jpg")
    image_file_png = os.path.join(image_folder_path, file_name + ".png")

    # Load ID CSV data
    if os.path.exists(id_csv_file_path):
        id_df = pd.read_csv(id_csv_file_path)
        id_table_html = id_df.to_html(index=False, classes="custom-table")
    else:
        id_table_html = "<p style='color:red;'>ID file not found. Please enter a valid file name.</p>"

    # Load image
    if os.path.exists(image_file_jpg):
        image_output = image_file_jpg
    elif os.path.exists(image_file_png):
        image_output = image_file_png
    else:
        image_output = None  # No image found

    # Switch visibility and return data
    return gr.update(visible=False), gr.update(visible=True), id_table_html, image_output

# Function to return to the input page
def go_back():
    return gr.update(visible=True), gr.update(visible=False), None, None

# Custom CSS to style the table, back button, and make the UI resemble Google's search interface
custom_css = """
body {
    font-family: Arial, sans-serif;
    text-align: center;
    margin-top: 20px;
}

input.svelte-1f354aw.svelte-1f354aw:focus, textarea.svelte-1f354aw.svelte-1f354aw:focus{
  border: none;
}

input[type=text] {
    width: 30%;
    padding: 12px 20px;
    margin: 8px 0;
    box-sizing: border-box;
    font-size: 18px;
}
button {
    padding: 10px 20px;
    font-size: 16px;
    cursor: pointer;
}
.custom-table {
    width: 100%;
    border-collapse: collapse;
    margin: 25px 0;
    font-size: 18px;
    text-align: left;
    border: 1px solid #ddd;
}
.custom-table th, .custom-table td {
    padding: 12px 15px;
    border: 1px solid #ddd;
}
.custom-table thead {
    background-color: #f4f4f4;
    border-bottom: 2px solid #ddd;
}
.custom-table tbody tr:nth-child(even) {
    background-color: #f9f9f9;
}
.custom-table tbody tr:hover {
    background-color: #f1f1f1;
}

/* Style the back button */
.back-button {
    width: 100px;
    height: 40px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    margin-top: 20px;
}
.back-button:hover {
    background-color: #45a049; /* Darker green on hover */
}
"""

# Gradio interface with multiple pages using visibility controls
with gr.Blocks(css=custom_css) as demo:
    with gr.Row(visible=True) as input_tab:
        gr.Markdown("<h1 style='text-align: center;'>Check ID Card Details</h1>")
        file_name_input = gr.Textbox(label="", placeholder="Enter ID Number", show_label=False)
        submit_btn = gr.Button("Search")

    with gr.Row(visible=False) as output_tab:
        with gr.Column(scale=2):
            output_table = gr.HTML()
        with gr.Column(scale=1):
            output_image = gr.Image()
        back_btn = gr.Button("Back", elem_classes="back-button")

    # Link the submit button to the transition function
    submit_btn.click(fn=display_csv_and_image, inputs=file_name_input, outputs=[input_tab, output_tab, output_table, output_image])

    # Link the back button to the go_back function
    back_btn.click(fn=go_back, inputs=None, outputs=[input_tab, output_tab, output_table, output_image])

# Launch the interface
demo.launch()
